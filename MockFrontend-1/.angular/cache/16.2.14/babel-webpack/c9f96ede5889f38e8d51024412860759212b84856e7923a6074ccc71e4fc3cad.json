{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TooltipAdjustDirective {\n  // private readonly FONT_SIZE = '15px';\n  constructor(element, renderer) {\n    this.element = element;\n    this.renderer = renderer;\n    this.MIN_CARD_WIDTH = '200px';\n    this.MAX_CARD_WIDTH = '250px';\n    this.MAX_CONTENT_WIDTH = '150px';\n  }\n  ngAfterViewInit() {\n    // console.log(\"ENTRO EN NGAFTERVIEWINIT\")\n    if (this.appTooltipAdjust) {\n      this.adjustTooltipPosition();\n      this.adjustCardDimensions();\n    }\n  }\n  adjustTooltipPosition() {\n    const element = this.element.nativeElement;\n    const rect = element.getBoundingClientRect();\n    // Obtener el contenedor .viewers-container y su rectángulo delimitador\n    const viewersContainer = document.querySelector('.viewer-thumbnail-wrapper');\n    if (!viewersContainer) {\n      console.error('Contenedor no encontrado');\n      return;\n    }\n    const containerRect = viewersContainer.getBoundingClientRect();\n    // Obtener el elemento padre (asumiendo que es la imagen)\n    const parentElement = element.parentElement;\n    const parentRect = parentElement.getBoundingClientRect();\n    // Calcular la posicion izquierda del tooltip en relacion con el contenedor\n    let offsetLeft = parentRect.left - containerRect.left;\n    // Ajustar la posicion si la tarjeta se sale del margen derecho del contenedor\n    if (rect.right > containerRect.right) {\n      // console.log(\"margen derecho\")\n      const overflowRight = rect.right - containerRect.right;\n      offsetLeft = Math.max(-145, offsetLeft - overflowRight);\n      this.setElementStyle('left', `${offsetLeft}px`);\n    }\n    // Ajustar la posicion si la tarjeta se sale del margen izquierdo del contenedor\n    if (rect.left < containerRect.left) {\n      // console.log(\"margen izquierdo\")\n      const overflowLeft = containerRect.left - rect.left;\n      offsetLeft = Math.max(-100, offsetLeft + overflowLeft);\n      this.setElementStyle('left', `${offsetLeft}px`);\n    }\n    // Aplicar los estilos de posicion al tooltip\n    this.setElementStyle('left', `${offsetLeft}px`);\n  }\n  adjustCardDimensions() {\n    // console.log(\"ajusto dimension card\")\n    // Establece el ancho maximo y minimo de la tarjeta principal\n    this.setElementStyle('max-width', this.MAX_CARD_WIDTH);\n    this.setElementStyle('min-width', this.MIN_CARD_WIDTH);\n    // Obtiene el elemento del cuerpo de la tarjeta .viewer-card-body\n    const cardBody = this.element.nativeElement.querySelector('.viewer-card-body');\n    if (cardBody) {\n      // Establece el ancho maximo del contenido dentro del cuerpo de la tarjeta\n      this.setElementStyle('max-width', this.MAX_CONTENT_WIDTH, cardBody);\n      // Selecciona todos los elementos de texto dentro del cuerpo de la tarjeta\n      const textElements = cardBody.querySelectorAll('*');\n      textElements.forEach(textElement => {\n        // Establece el ancho maximo del contenido para cada elemento de texto\n        this.setElementStyle('max-width', this.MAX_CONTENT_WIDTH, textElement);\n        // this.setElementStyle('font-size', this.FONT_SIZE, textElement);\n      });\n    }\n  }\n  // Metodo para establecer el estilo a un elemento\n  setElementStyle(style, value, element = this.element.nativeElement) {\n    this.renderer.setStyle(element, style, value);\n  }\n  static #_ = this.ɵfac = function TooltipAdjustDirective_Factory(t) {\n    return new (t || TooltipAdjustDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: TooltipAdjustDirective,\n    selectors: [[\"\", \"appTooltipAdjust\", \"\"]],\n    inputs: {\n      appTooltipAdjust: \"appTooltipAdjust\"\n    }\n  });\n}","map":{"version":3,"names":["TooltipAdjustDirective","constructor","element","renderer","MIN_CARD_WIDTH","MAX_CARD_WIDTH","MAX_CONTENT_WIDTH","ngAfterViewInit","appTooltipAdjust","adjustTooltipPosition","adjustCardDimensions","nativeElement","rect","getBoundingClientRect","viewersContainer","document","querySelector","console","error","containerRect","parentElement","parentRect","offsetLeft","left","right","overflowRight","Math","max","setElementStyle","overflowLeft","cardBody","textElements","querySelectorAll","forEach","textElement","style","value","setStyle","_","i0","ɵɵdirectiveInject","ElementRef","Renderer2","_2","selectors","inputs"],"sources":["C:\\Users\\Ayelen\\Desktop\\SignalRPOC\\MockFrontend-1\\src\\app\\directive\\tooltip-adjust.directive.ts"],"sourcesContent":["import { Directive, ElementRef, Renderer2, Input, AfterViewInit } from '@angular/core';\n\n@Directive({\n  selector: '[appTooltipAdjust]'\n})\nexport class TooltipAdjustDirective implements AfterViewInit{\n  @Input() appTooltipAdjust: boolean;\n\n  private readonly MIN_CARD_WIDTH = '200px';\n  private readonly MAX_CARD_WIDTH = '250px';\n  private readonly MAX_CONTENT_WIDTH = '150px';\n // private readonly FONT_SIZE = '15px';\n\n  constructor(private element: ElementRef, private renderer: Renderer2) { }\n\n  ngAfterViewInit(): void {\n    // console.log(\"ENTRO EN NGAFTERVIEWINIT\")\n    if(this.appTooltipAdjust){\n      this.adjustTooltipPosition();\n      this.adjustCardDimensions();\n    }\n  }\n\n  adjustTooltipPosition() {\n    const element = this.element.nativeElement;\n    const rect = element.getBoundingClientRect();\n\n    // Obtener el contenedor .viewers-container y su rectángulo delimitador\n    const viewersContainer = document.querySelector('.viewer-thumbnail-wrapper');\n    if (!viewersContainer) {\n      console.error('Contenedor no encontrado');\n      return;\n    }\n    const containerRect = viewersContainer.getBoundingClientRect();\n\n    // Obtener el elemento padre (asumiendo que es la imagen)\n    const parentElement = element.parentElement;\n    const parentRect = parentElement.getBoundingClientRect();\n\n    // Calcular la posicion izquierda del tooltip en relacion con el contenedor\n    let offsetLeft = parentRect.left - containerRect.left;\n\n    // Ajustar la posicion si la tarjeta se sale del margen derecho del contenedor\n    if (rect.right > containerRect.right) {\n      // console.log(\"margen derecho\")\n      const overflowRight = rect.right - containerRect.right;\n      offsetLeft = Math.max(-145, offsetLeft - overflowRight);\n      this.setElementStyle('left', `${offsetLeft}px`);\n    }\n\n    // Ajustar la posicion si la tarjeta se sale del margen izquierdo del contenedor\n    if (rect.left < containerRect.left) {\n      // console.log(\"margen izquierdo\")\n      const overflowLeft = containerRect.left - rect.left;\n      offsetLeft = Math.max(-100, offsetLeft + overflowLeft);\n      this.setElementStyle('left', `${offsetLeft}px`);\n    }\n\n    // Aplicar los estilos de posicion al tooltip\n    this.setElementStyle('left', `${offsetLeft}px`);\n\n  }\n\n  private adjustCardDimensions(): void {\n    // console.log(\"ajusto dimension card\")\n\n    // Establece el ancho maximo y minimo de la tarjeta principal\n    this.setElementStyle('max-width', this.MAX_CARD_WIDTH);\n    this.setElementStyle('min-width', this.MIN_CARD_WIDTH);\n\n    // Obtiene el elemento del cuerpo de la tarjeta .viewer-card-body\n    const cardBody = this.element.nativeElement.querySelector('.viewer-card-body');\n    if (cardBody) {\n      // Establece el ancho maximo del contenido dentro del cuerpo de la tarjeta\n      this.setElementStyle('max-width', this.MAX_CONTENT_WIDTH, cardBody);\n\n      // Selecciona todos los elementos de texto dentro del cuerpo de la tarjeta\n      const textElements = cardBody.querySelectorAll('*');\n\n      textElements.forEach((textElement: HTMLElement) => {\n        // Establece el ancho maximo del contenido para cada elemento de texto\n        this.setElementStyle('max-width', this.MAX_CONTENT_WIDTH, textElement);\n\n        // this.setElementStyle('font-size', this.FONT_SIZE, textElement);\n      });\n    }\n  }\n\n  // Metodo para establecer el estilo a un elemento\n  private setElementStyle(style: string, value: string, element: HTMLElement = this.element.nativeElement): void {\n    this.renderer.setStyle(element, style, value);\n  }\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}