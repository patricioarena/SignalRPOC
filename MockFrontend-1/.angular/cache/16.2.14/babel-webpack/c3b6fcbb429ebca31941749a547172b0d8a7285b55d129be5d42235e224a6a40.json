{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nimport { TextMessageFormat } from \"./TextMessageFormat\";\nimport { isArrayBuffer } from \"./Utils\";\n/** @private */\nvar HandshakeProtocol = /** @class */function () {\n  function HandshakeProtocol() {}\n  // Handshake request is always JSON\n  HandshakeProtocol.prototype.writeHandshakeRequest = function (handshakeRequest) {\n    return TextMessageFormat.write(JSON.stringify(handshakeRequest));\n  };\n  HandshakeProtocol.prototype.parseHandshakeResponse = function (data) {\n    var responseMessage;\n    var messageData;\n    var remainingData;\n    if (isArrayBuffer(data)) {\n      // Format is binary but still need to read JSON text from handshake response\n      var binaryData = new Uint8Array(data);\n      var separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\n      if (separatorIndex === -1) {\n        throw new Error(\"Message is incomplete.\");\n      }\n      // content before separator is handshake response\n      // optional content after is additional messages\n      var responseLength = separatorIndex + 1;\n      messageData = String.fromCharCode.apply(null, binaryData.slice(0, responseLength));\n      remainingData = binaryData.byteLength > responseLength ? binaryData.slice(responseLength).buffer : null;\n    } else {\n      var textData = data;\n      var separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\n      if (separatorIndex === -1) {\n        throw new Error(\"Message is incomplete.\");\n      }\n      // content before separator is handshake response\n      // optional content after is additional messages\n      var responseLength = separatorIndex + 1;\n      messageData = textData.substring(0, responseLength);\n      remainingData = textData.length > responseLength ? textData.substring(responseLength) : null;\n    }\n    // At this point we should have just the single handshake message\n    var messages = TextMessageFormat.parse(messageData);\n    responseMessage = JSON.parse(messages[0]);\n    // multiple messages could have arrived with handshake\n    // return additional data to be parsed as usual, or null if all parsed\n    return [remainingData, responseMessage];\n  };\n  return HandshakeProtocol;\n}();\nexport { HandshakeProtocol };","map":{"version":3,"names":["TextMessageFormat","isArrayBuffer","HandshakeProtocol","prototype","writeHandshakeRequest","handshakeRequest","write","JSON","stringify","parseHandshakeResponse","data","responseMessage","messageData","remainingData","binaryData","Uint8Array","separatorIndex","indexOf","RecordSeparatorCode","Error","responseLength","String","fromCharCode","apply","slice","byteLength","buffer","textData","RecordSeparator","substring","length","messages","parse"],"sources":["C:/Users/Ayelen/Desktop/SignalRPOC/MockFrontend-1/node_modules/@aspnet/signalr/dist/esm/HandshakeProtocol.js"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n/** @private */\r\nvar HandshakeProtocol = /** @class */ (function () {\r\n    function HandshakeProtocol() {\r\n    }\r\n    // Handshake request is always JSON\r\n    HandshakeProtocol.prototype.writeHandshakeRequest = function (handshakeRequest) {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    };\r\n    HandshakeProtocol.prototype.parseHandshakeResponse = function (data) {\r\n        var responseMessage;\r\n        var messageData;\r\n        var remainingData;\r\n        if (isArrayBuffer(data)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            var binaryData = new Uint8Array(data);\r\n            var separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            var responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, binaryData.slice(0, responseLength));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        }\r\n        else {\r\n            var textData = data;\r\n            var separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            var responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n        // At this point we should have just the single handshake message\r\n        var messages = TextMessageFormat.parse(messageData);\r\n        responseMessage = JSON.parse(messages[0]);\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    };\r\n    return HandshakeProtocol;\r\n}());\r\nexport { HandshakeProtocol };\r\n"],"mappings":"AAAA;AACA;AACA,SAASA,iBAAiB,QAAQ,qBAAqB;AACvD,SAASC,aAAa,QAAQ,SAAS;AACvC;AACA,IAAIC,iBAAiB,GAAG,aAAe,YAAY;EAC/C,SAASA,iBAAiBA,CAAA,EAAG,CAC7B;EACA;EACAA,iBAAiB,CAACC,SAAS,CAACC,qBAAqB,GAAG,UAAUC,gBAAgB,EAAE;IAC5E,OAAOL,iBAAiB,CAACM,KAAK,CAACC,IAAI,CAACC,SAAS,CAACH,gBAAgB,CAAC,CAAC;EACpE,CAAC;EACDH,iBAAiB,CAACC,SAAS,CAACM,sBAAsB,GAAG,UAAUC,IAAI,EAAE;IACjE,IAAIC,eAAe;IACnB,IAAIC,WAAW;IACf,IAAIC,aAAa;IACjB,IAAIZ,aAAa,CAACS,IAAI,CAAC,EAAE;MACrB;MACA,IAAII,UAAU,GAAG,IAAIC,UAAU,CAACL,IAAI,CAAC;MACrC,IAAIM,cAAc,GAAGF,UAAU,CAACG,OAAO,CAACjB,iBAAiB,CAACkB,mBAAmB,CAAC;MAC9E,IAAIF,cAAc,KAAK,CAAC,CAAC,EAAE;QACvB,MAAM,IAAIG,KAAK,CAAC,wBAAwB,CAAC;MAC7C;MACA;MACA;MACA,IAAIC,cAAc,GAAGJ,cAAc,GAAG,CAAC;MACvCJ,WAAW,GAAGS,MAAM,CAACC,YAAY,CAACC,KAAK,CAAC,IAAI,EAAET,UAAU,CAACU,KAAK,CAAC,CAAC,EAAEJ,cAAc,CAAC,CAAC;MAClFP,aAAa,GAAIC,UAAU,CAACW,UAAU,GAAGL,cAAc,GAAIN,UAAU,CAACU,KAAK,CAACJ,cAAc,CAAC,CAACM,MAAM,GAAG,IAAI;IAC7G,CAAC,MACI;MACD,IAAIC,QAAQ,GAAGjB,IAAI;MACnB,IAAIM,cAAc,GAAGW,QAAQ,CAACV,OAAO,CAACjB,iBAAiB,CAAC4B,eAAe,CAAC;MACxE,IAAIZ,cAAc,KAAK,CAAC,CAAC,EAAE;QACvB,MAAM,IAAIG,KAAK,CAAC,wBAAwB,CAAC;MAC7C;MACA;MACA;MACA,IAAIC,cAAc,GAAGJ,cAAc,GAAG,CAAC;MACvCJ,WAAW,GAAGe,QAAQ,CAACE,SAAS,CAAC,CAAC,EAAET,cAAc,CAAC;MACnDP,aAAa,GAAIc,QAAQ,CAACG,MAAM,GAAGV,cAAc,GAAIO,QAAQ,CAACE,SAAS,CAACT,cAAc,CAAC,GAAG,IAAI;IAClG;IACA;IACA,IAAIW,QAAQ,GAAG/B,iBAAiB,CAACgC,KAAK,CAACpB,WAAW,CAAC;IACnDD,eAAe,GAAGJ,IAAI,CAACyB,KAAK,CAACD,QAAQ,CAAC,CAAC,CAAC,CAAC;IACzC;IACA;IACA,OAAO,CAAClB,aAAa,EAAEF,eAAe,CAAC;EAC3C,CAAC;EACD,OAAOT,iBAAiB;AAC5B,CAAC,CAAC,CAAE;AACJ,SAASA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}