{"ast":null,"code":"import * as signalR from '@aspnet/signalr';\nimport { ExpectedMessage } from './expected.messages';\nimport * as i0 from \"@angular/core\";\nexport class SignalRService {\n  constructor() {\n    this.connectionName = \"alice\"; // Puedes cambiar esto o hacerlo configurable\n    this.startConnection = () => {\n      this.hubConnection = new signalR.HubConnectionBuilder().withUrl(`https://localhost:44385/SignalHub?connectionName=${this.connectionName}`).build();\n      this.hubConnection.start().then(() => console.log(\"Connection started\")).catch(err => console.error(\"Error while starting connection: \" + err));\n      this.hubConnection.on(ExpectedMessage.welcome, data => {\n        console.log(`Welcome: ${data}`);\n        this.hubConnection.invoke(\"GetData\", \"user id\", data).then(resp => console.log(\"response: \" + JSON.stringify(resp))).catch(err => console.error(err));\n      });\n      this.hubConnection.on(ExpectedMessage.show_notification, data => {\n        this.showNotification();\n      });\n    };\n  }\n  sendPayload(payload) {\n    const connectionId = this.hubConnection.connectionId;\n    this.hubConnection.invoke('ReceivePayload', connectionId, payload).catch(err => console.error(err));\n  }\n  showNotification() {\n    var notification = new Notification(this.connectionName, {\n      body: 'You clicked on the button!',\n      icon: 'https://i.pinimg.com/originals/35/0e/dd/350edd537688ad50ea3c5615e02ba84e.jpg'\n    });\n    setTimeout(function () {\n      notification.close();\n    }, 5000);\n  }\n  static #_ = this.ɵfac = function SignalRService_Factory(t) {\n    return new (t || SignalRService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SignalRService,\n    factory: SignalRService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["signalR","ExpectedMessage","SignalRService","constructor","connectionName","startConnection","hubConnection","HubConnectionBuilder","withUrl","build","start","then","console","log","catch","err","error","on","welcome","data","invoke","resp","JSON","stringify","show_notification","showNotification","sendPayload","payload","connectionId","notification","Notification","body","icon","setTimeout","close","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\patri\\source\\repos\\SignalRPOC\\MockFrontend-1\\src\\app\\signal-r.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport * as signalR from '@aspnet/signalr';\r\nimport { ExpectedMessage } from './expected.messages';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SignalRService {\r\n  private hubConnection: signalR.HubConnection;\r\n  private connectionName: string = \"alice\"; // Puedes cambiar esto o hacerlo configurable\r\n\r\n  public startConnection = () => {\r\n    this.hubConnection = new signalR.HubConnectionBuilder()\r\n      .withUrl(`https://localhost:44385/SignalHub?connectionName=${this.connectionName}`)\r\n      .build();\r\n\r\n    this.hubConnection.start()\r\n      .then(() => console.log(\"Connection started\"))\r\n      .catch(err => console.error(\"Error while starting connection: \" + err));\r\n\r\n\r\n\r\n    this.hubConnection.on(ExpectedMessage.welcome, (data) => {\r\n      console.log(`Welcome: ${data}`);\r\n\r\n      this.hubConnection.invoke(\"GetData\", \"user id\", data)\r\n        .then((resp) => console.log(\"response: \" + JSON.stringify(resp)))\r\n        .catch(err => console.error(err));\r\n\r\n\r\n    });\r\n\r\n    this.hubConnection.on(ExpectedMessage.show_notification, (data) => {\r\n      this.showNotification();\r\n    });\r\n  }\r\n\r\n  public sendPayload(payload: any) {\r\n    const connectionId = this.hubConnection.connectionId;\r\n    this.hubConnection.invoke('ReceivePayload', connectionId, payload)\r\n      .catch(err => console.error(err));\r\n  }\r\n\r\n  private showNotification() {\r\n    var notification = new Notification(this.connectionName, {\r\n      body: 'You clicked on the button!',\r\n      icon: 'https://i.pinimg.com/originals/35/0e/dd/350edd537688ad50ea3c5615e02ba84e.jpg'\r\n    });\r\n    setTimeout(function () { notification.close(); }, 5000);\r\n  }\r\n}\r\n"],"mappings":"AACA,OAAO,KAAKA,OAAO,MAAM,iBAAiB;AAC1C,SAASC,eAAe,QAAQ,qBAAqB;;AAMrD,OAAM,MAAOC,cAAc;EAH3BC,YAAA;IAKU,KAAAC,cAAc,GAAW,OAAO,CAAC,CAAC;IAEnC,KAAAC,eAAe,GAAG,MAAK;MAC5B,IAAI,CAACC,aAAa,GAAG,IAAIN,OAAO,CAACO,oBAAoB,EAAE,CACpDC,OAAO,CAAC,oDAAoD,IAAI,CAACJ,cAAc,EAAE,CAAC,CAClFK,KAAK,EAAE;MAEV,IAAI,CAACH,aAAa,CAACI,KAAK,EAAE,CACvBC,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAC7CC,KAAK,CAACC,GAAG,IAAIH,OAAO,CAACI,KAAK,CAAC,mCAAmC,GAAGD,GAAG,CAAC,CAAC;MAIzE,IAAI,CAACT,aAAa,CAACW,EAAE,CAAChB,eAAe,CAACiB,OAAO,EAAGC,IAAI,IAAI;QACtDP,OAAO,CAACC,GAAG,CAAC,YAAYM,IAAI,EAAE,CAAC;QAE/B,IAAI,CAACb,aAAa,CAACc,MAAM,CAAC,SAAS,EAAE,SAAS,EAAED,IAAI,CAAC,CAClDR,IAAI,CAAEU,IAAI,IAAKT,OAAO,CAACC,GAAG,CAAC,YAAY,GAAGS,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CAAC,CAAC,CAChEP,KAAK,CAACC,GAAG,IAAIH,OAAO,CAACI,KAAK,CAACD,GAAG,CAAC,CAAC;MAGrC,CAAC,CAAC;MAEF,IAAI,CAACT,aAAa,CAACW,EAAE,CAAChB,eAAe,CAACuB,iBAAiB,EAAGL,IAAI,IAAI;QAChE,IAAI,CAACM,gBAAgB,EAAE;MACzB,CAAC,CAAC;IACJ,CAAC;;EAEMC,WAAWA,CAACC,OAAY;IAC7B,MAAMC,YAAY,GAAG,IAAI,CAACtB,aAAa,CAACsB,YAAY;IACpD,IAAI,CAACtB,aAAa,CAACc,MAAM,CAAC,gBAAgB,EAAEQ,YAAY,EAAED,OAAO,CAAC,CAC/Db,KAAK,CAACC,GAAG,IAAIH,OAAO,CAACI,KAAK,CAACD,GAAG,CAAC,CAAC;EACrC;EAEQU,gBAAgBA,CAAA;IACtB,IAAII,YAAY,GAAG,IAAIC,YAAY,CAAC,IAAI,CAAC1B,cAAc,EAAE;MACvD2B,IAAI,EAAE,4BAA4B;MAClCC,IAAI,EAAE;KACP,CAAC;IACFC,UAAU,CAAC;MAAcJ,YAAY,CAACK,KAAK,EAAE;IAAE,CAAC,EAAE,IAAI,CAAC;EACzD;EAAC,QAAAC,CAAA,G;qBA1CUjC,cAAc;EAAA;EAAA,QAAAkC,EAAA,G;WAAdlC,cAAc;IAAAmC,OAAA,EAAdnC,cAAc,CAAAoC,IAAA;IAAAC,UAAA,EAFb;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}