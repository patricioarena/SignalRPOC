{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n// Not exported from index\n/** @private */\nvar TextMessageFormat = /** @class */function () {\n  function TextMessageFormat() {}\n  TextMessageFormat.write = function (output) {\n    return \"\" + output + TextMessageFormat.RecordSeparator;\n  };\n  TextMessageFormat.parse = function (input) {\n    if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\n      throw new Error(\"Message is incomplete.\");\n    }\n    var messages = input.split(TextMessageFormat.RecordSeparator);\n    messages.pop();\n    return messages;\n  };\n  TextMessageFormat.RecordSeparatorCode = 0x1e;\n  TextMessageFormat.RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\n  return TextMessageFormat;\n}();\nexport { TextMessageFormat };","map":{"version":3,"names":["TextMessageFormat","write","output","RecordSeparator","parse","input","length","Error","messages","split","pop","RecordSeparatorCode","String","fromCharCode"],"sources":["C:/Users/patri/source/repos/SignalRPOC/MockFrontend-1/node_modules/@aspnet/signalr/dist/esm/TextMessageFormat.js"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n// Not exported from index\r\n/** @private */\r\nvar TextMessageFormat = /** @class */ (function () {\r\n    function TextMessageFormat() {\r\n    }\r\n    TextMessageFormat.write = function (output) {\r\n        return \"\" + output + TextMessageFormat.RecordSeparator;\r\n    };\r\n    TextMessageFormat.parse = function (input) {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n        var messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    };\r\n    TextMessageFormat.RecordSeparatorCode = 0x1e;\r\n    TextMessageFormat.RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n    return TextMessageFormat;\r\n}());\r\nexport { TextMessageFormat };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,iBAAiB,GAAG,aAAe,YAAY;EAC/C,SAASA,iBAAiBA,CAAA,EAAG,CAC7B;EACAA,iBAAiB,CAACC,KAAK,GAAG,UAAUC,MAAM,EAAE;IACxC,OAAO,EAAE,GAAGA,MAAM,GAAGF,iBAAiB,CAACG,eAAe;EAC1D,CAAC;EACDH,iBAAiB,CAACI,KAAK,GAAG,UAAUC,KAAK,EAAE;IACvC,IAAIA,KAAK,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC,KAAKN,iBAAiB,CAACG,eAAe,EAAE;MAC/D,MAAM,IAAII,KAAK,CAAC,wBAAwB,CAAC;IAC7C;IACA,IAAIC,QAAQ,GAAGH,KAAK,CAACI,KAAK,CAACT,iBAAiB,CAACG,eAAe,CAAC;IAC7DK,QAAQ,CAACE,GAAG,CAAC,CAAC;IACd,OAAOF,QAAQ;EACnB,CAAC;EACDR,iBAAiB,CAACW,mBAAmB,GAAG,IAAI;EAC5CX,iBAAiB,CAACG,eAAe,GAAGS,MAAM,CAACC,YAAY,CAACb,iBAAiB,CAACW,mBAAmB,CAAC;EAC9F,OAAOX,iBAAiB;AAC5B,CAAC,CAAC,CAAE;AACJ,SAASA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}