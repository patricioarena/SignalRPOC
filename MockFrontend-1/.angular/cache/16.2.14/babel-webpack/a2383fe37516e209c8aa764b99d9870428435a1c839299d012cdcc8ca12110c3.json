{"ast":null,"code":"import { isDevMode } from '@angular/core';\nimport * as signalR from '@aspnet/signalr';\nimport { ExpectedMessage } from './expected.messages';\nimport * as i0 from \"@angular/core\";\nexport class SignalRService {\n  constructor() {\n    this.username = \"alice\";\n    this.picture = \"https://i.pinimg.com/originals/35/0e/dd/350edd537688ad50ea3c5615e02ba84e.jpg\";\n    this.connectionId = \"\";\n    this.startConnection = () => {\n      this.hubConnection = new signalR.HubConnectionBuilder().withUrl(`https://localhost:44385/SignalHub?connectionName=${this.username}`).build();\n      this.hubConnection.start().then(() => console.log(\"Connection started\")).catch(err => console.error(\"Error while starting connection: \" + err));\n      this.hubConnection.on(ExpectedMessage.welcome, connectionId => {\n        console.log(`Welcome: ${connectionId}`);\n        this.connectionId = connectionId;\n        const payload = {\n          userId: 12345,\n          connectionName: this.username,\n          url: `http://localhost:4200/`,\n          picture: this.picture\n        };\n        this.sendPayload(payload);\n      });\n      this.hubConnection.on('ReceivePayloadResponse', data => {\n        isDevMode() && console.log({\n          data: JSON.stringify(data)\n        });\n      });\n      this.hubConnection.on(ExpectedMessage.show_notification, () => {\n        this.showNotification();\n      });\n    };\n  }\n  sendPayload(payload) {\n    this.hubConnection.invoke('ReceivePayload', this.connectionId, payload).catch(err => console.error(err));\n  }\n  showNotification() {\n    var notification = new Notification(this.connectionName, {\n      body: 'You clicked on the button!',\n      icon: 'https://i.pinimg.com/originals/35/0e/dd/350edd537688ad50ea3c5615e02ba84e.jpg'\n    });\n    setTimeout(function () {\n      notification.close();\n    }, 5000);\n  }\n  static #_ = this.ɵfac = function SignalRService_Factory(t) {\n    return new (t || SignalRService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SignalRService,\n    factory: SignalRService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["isDevMode","signalR","ExpectedMessage","SignalRService","constructor","username","picture","connectionId","startConnection","hubConnection","HubConnectionBuilder","withUrl","build","start","then","console","log","catch","err","error","on","welcome","payload","userId","connectionName","url","sendPayload","data","JSON","stringify","show_notification","showNotification","invoke","notification","Notification","body","icon","setTimeout","close","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\patri\\source\\repos\\SignalRPOC\\MockFrontend-1\\src\\app\\signal-r.service.ts"],"sourcesContent":["import { Injectable, isDevMode } from '@angular/core';\r\nimport * as signalR from '@aspnet/signalr';\r\nimport { ExpectedMessage } from './expected.messages';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SignalRService {\r\n  private username: string = \"alice\";\r\n  private picture: string = \"https://i.pinimg.com/originals/35/0e/dd/350edd537688ad50ea3c5615e02ba84e.jpg\"\r\n  private pa\r\n\r\n  private hubConnection: signalR.HubConnection;\r\n  private connectionId: string = \"\";\r\n\r\n  public startConnection = () => {\r\n    this.hubConnection = new signalR.HubConnectionBuilder()\r\n      .withUrl(`https://localhost:44385/SignalHub?connectionName=${this.username}`)\r\n      .build();\r\n\r\n    this.hubConnection.start()\r\n      .then(() => console.log(\"Connection started\"))\r\n      .catch(err => console.error(\"Error while starting connection: \" + err));\r\n\r\n\r\n\r\n    this.hubConnection.on(ExpectedMessage.welcome, (connectionId) => {\r\n      console.log(`Welcome: ${connectionId}`);\r\n      this.connectionId = connectionId;\r\n\r\n      const payload = {\r\n        userId: 12345,\r\n        connectionName: this.username,\r\n        url: `http://localhost:4200/`,\r\n        picture: this.picture\r\n      }\r\n\r\n      this.sendPayload(payload);\r\n\r\n    });\r\n\r\n\r\n    this.hubConnection.on('ReceivePayloadResponse', (data) => {\r\n      isDevMode() && console.log({\r\n        data: JSON.stringify(data)\r\n      })\r\n    });\r\n\r\n    this.hubConnection.on(ExpectedMessage.show_notification, () => {\r\n      this.showNotification();\r\n    });\r\n  }\r\n\r\n  public sendPayload(payload: any) {\r\n    this.hubConnection.invoke('ReceivePayload', this.connectionId, payload)\r\n      .catch(err => console.error(err));\r\n  }\r\n\r\n  private showNotification() {\r\n    var notification = new Notification(this.connectionName, {\r\n      body: 'You clicked on the button!',\r\n      icon: 'https://i.pinimg.com/originals/35/0e/dd/350edd537688ad50ea3c5615e02ba84e.jpg'\r\n    });\r\n    setTimeout(function () { notification.close(); }, 5000);\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAAqBA,SAAS,QAAQ,eAAe;AACrD,OAAO,KAAKC,OAAO,MAAM,iBAAiB;AAC1C,SAASC,eAAe,QAAQ,qBAAqB;;AAMrD,OAAM,MAAOC,cAAc;EAH3BC,YAAA;IAIU,KAAAC,QAAQ,GAAW,OAAO;IAC1B,KAAAC,OAAO,GAAW,8EAA8E;IAIhG,KAAAC,YAAY,GAAW,EAAE;IAE1B,KAAAC,eAAe,GAAG,MAAK;MAC5B,IAAI,CAACC,aAAa,GAAG,IAAIR,OAAO,CAACS,oBAAoB,EAAE,CACpDC,OAAO,CAAC,oDAAoD,IAAI,CAACN,QAAQ,EAAE,CAAC,CAC5EO,KAAK,EAAE;MAEV,IAAI,CAACH,aAAa,CAACI,KAAK,EAAE,CACvBC,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAC7CC,KAAK,CAACC,GAAG,IAAIH,OAAO,CAACI,KAAK,CAAC,mCAAmC,GAAGD,GAAG,CAAC,CAAC;MAIzE,IAAI,CAACT,aAAa,CAACW,EAAE,CAAClB,eAAe,CAACmB,OAAO,EAAGd,YAAY,IAAI;QAC9DQ,OAAO,CAACC,GAAG,CAAC,YAAYT,YAAY,EAAE,CAAC;QACvC,IAAI,CAACA,YAAY,GAAGA,YAAY;QAEhC,MAAMe,OAAO,GAAG;UACdC,MAAM,EAAE,KAAK;UACbC,cAAc,EAAE,IAAI,CAACnB,QAAQ;UAC7BoB,GAAG,EAAE,wBAAwB;UAC7BnB,OAAO,EAAE,IAAI,CAACA;SACf;QAED,IAAI,CAACoB,WAAW,CAACJ,OAAO,CAAC;MAE3B,CAAC,CAAC;MAGF,IAAI,CAACb,aAAa,CAACW,EAAE,CAAC,wBAAwB,EAAGO,IAAI,IAAI;QACvD3B,SAAS,EAAE,IAAIe,OAAO,CAACC,GAAG,CAAC;UACzBW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACF,IAAI;SAC1B,CAAC;MACJ,CAAC,CAAC;MAEF,IAAI,CAAClB,aAAa,CAACW,EAAE,CAAClB,eAAe,CAAC4B,iBAAiB,EAAE,MAAK;QAC5D,IAAI,CAACC,gBAAgB,EAAE;MACzB,CAAC,CAAC;IACJ,CAAC;;EAEML,WAAWA,CAACJ,OAAY;IAC7B,IAAI,CAACb,aAAa,CAACuB,MAAM,CAAC,gBAAgB,EAAE,IAAI,CAACzB,YAAY,EAAEe,OAAO,CAAC,CACpEL,KAAK,CAACC,GAAG,IAAIH,OAAO,CAACI,KAAK,CAACD,GAAG,CAAC,CAAC;EACrC;EAEQa,gBAAgBA,CAAA;IACtB,IAAIE,YAAY,GAAG,IAAIC,YAAY,CAAC,IAAI,CAACV,cAAc,EAAE;MACvDW,IAAI,EAAE,4BAA4B;MAClCC,IAAI,EAAE;KACP,CAAC;IACFC,UAAU,CAAC;MAAcJ,YAAY,CAACK,KAAK,EAAE;IAAE,CAAC,EAAE,IAAI,CAAC;EACzD;EAAC,QAAAC,CAAA,G;qBAzDUpC,cAAc;EAAA;EAAA,QAAAqC,EAAA,G;WAAdrC,cAAc;IAAAsC,OAAA,EAAdtC,cAAc,CAAAuC,IAAA;IAAAC,UAAA,EAFb;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}