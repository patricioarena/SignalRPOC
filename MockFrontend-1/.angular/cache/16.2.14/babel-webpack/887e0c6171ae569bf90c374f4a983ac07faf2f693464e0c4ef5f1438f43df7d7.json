{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TooltipAdjustDirective {\n  constructor(element, renderer) {\n    this.element = element;\n    this.renderer = renderer;\n    this.MAX_CARD_WIDTH = '300px';\n    this.MAX_CONTENT_WIDTH = '150px';\n    this.FONT_SIZE = '14px';\n  }\n  ngAfterViewInit() {\n    if (this.appTooltipAdjust) {\n      this.adjustTooltipPosition();\n      this.adjustCardDimensions();\n    }\n  }\n  onWindowResize() {\n    this.adjustTooltipPosition();\n    this.adjustCardDimensions();\n  }\n  adjustTooltipPosition() {\n    const element = this.element.nativeElement;\n    const rect = element.getBoundingClientRect();\n    // Obtener el contenedor padre para calcular la posición relativa\n    const parentElement = element.parentElement;\n    if (!parentElement) return;\n    const parentRect = parentElement.getBoundingClientRect();\n    // Calcular la posición del tooltip en relación con el contenedor padre\n    const offsetLeft = rect.left - parentRect.left;\n    const offsetTop = rect.top - parentRect.top;\n    // Ajustar la posición si la tarjeta se sale del margen derecho\n    if (rect.right > parentRect.right) {\n      const overflowRight = rect.right - parentRect.right;\n      const newLeft = Math.max(0, offsetLeft - overflowRight);\n      this.setElementStyle('left', `${newLeft}px`);\n    }\n    // Ajustar la posición si la tarjeta se sale del margen izquierdo\n    if (rect.left < parentRect.left) {\n      const overflowLeft = parentRect.left - rect.left;\n      const newLeft = Math.min(0, offsetLeft + overflowLeft);\n      this.setElementStyle('left', `${newLeft}px`);\n    }\n    // Ajustar la posición si la tarjeta se sale del margen superior\n    if (rect.top < parentRect.top) {\n      const overflowTop = parentRect.top - rect.top;\n      const newTop = Math.min(0, offsetTop + overflowTop);\n      this.setElementStyle('top', `${newTop}px`);\n    }\n    // Ajustar la posición si la tarjeta se sale del margen inferior\n    if (rect.bottom > parentRect.bottom) {\n      const overflowBottom = rect.bottom - parentRect.bottom;\n      const newTop = Math.max(0, offsetTop - overflowBottom);\n      this.setElementStyle('top', `${newTop}px`);\n    }\n  }\n  adjustCardDimensions() {\n    this.setElementStyle('max-width', this.MAX_CARD_WIDTH);\n    const cardBody = this.element.nativeElement.querySelector('.viewer-card-body');\n    if (cardBody) {\n      this.setElementStyle('max-width', this.MAX_CONTENT_WIDTH, cardBody);\n      const textElements = cardBody.querySelectorAll('*');\n      textElements.forEach(textElement => {\n        this.setElementStyle('max-width', this.MAX_CONTENT_WIDTH, textElement);\n        this.setElementStyle('font-size', this.FONT_SIZE, textElement);\n      });\n    }\n  }\n  setElementStyle(style, value, element = this.element.nativeElement) {\n    this.renderer.setStyle(element, style, value);\n  }\n  static #_ = this.ɵfac = function TooltipAdjustDirective_Factory(t) {\n    return new (t || TooltipAdjustDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: TooltipAdjustDirective,\n    selectors: [[\"\", \"appTooltipAdjust\", \"\"]],\n    hostBindings: function TooltipAdjustDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"resize\", function TooltipAdjustDirective_resize_HostBindingHandler() {\n          return ctx.onWindowResize();\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    inputs: {\n      appTooltipAdjust: \"appTooltipAdjust\"\n    }\n  });\n}","map":{"version":3,"names":["TooltipAdjustDirective","constructor","element","renderer","MAX_CARD_WIDTH","MAX_CONTENT_WIDTH","FONT_SIZE","ngAfterViewInit","appTooltipAdjust","adjustTooltipPosition","adjustCardDimensions","onWindowResize","nativeElement","rect","getBoundingClientRect","parentElement","parentRect","offsetLeft","left","offsetTop","top","right","overflowRight","newLeft","Math","max","setElementStyle","overflowLeft","min","overflowTop","newTop","bottom","overflowBottom","cardBody","querySelector","textElements","querySelectorAll","forEach","textElement","style","value","setStyle","_","i0","ɵɵdirectiveInject","ElementRef","Renderer2","_2","selectors","hostBindings","TooltipAdjustDirective_HostBindings","rf","ctx","ɵɵresolveWindow"],"sources":["C:\\Users\\Ayelen\\Desktop\\SignalRPOC\\MockFrontend-1\\src\\app\\directive\\tooltip-adjust.directive.ts"],"sourcesContent":["// import { Directive, ElementRef, Renderer2, HostListener, Input, AfterViewInit } from '@angular/core';\n\n// @Directive({\n//   selector: '[appTooltipAdjust]'\n// })\n// export class TooltipAdjustDirective implements AfterViewInit{\n//   @Input() appTooltipAdjust: boolean;\n\n//   private readonly MAX_CARD_WIDTH = '300px';\n//   private readonly MAX_CONTENT_WIDTH = '150px';\n//   private readonly FONT_SIZE = '14px';\n\n//   constructor(private element: ElementRef, private renderer: Renderer2) { }\n\n//   ngAfterViewInit(): void {\n//     console.log(\"ENTRO EN NGAFTERVIEWINIT\")\n//     if(this.appTooltipAdjust){\n//       this.adjustTooltipPosition();\n//       this.adjustCardDimensions();\n//     }\n//   }\n\n//   @HostListener('window:resize')\n//   onWindowResize(){\n//     console.log(\"ONWINDOWRESIZE\")\n//     this.adjustTooltipPosition();\n//     this.adjustCardDimensions();\n//   }\n\n//   adjustTooltipPosition() {\n//     const element = this.element.nativeElement;\n//     const rect = element.getBoundingClientRect();\n//     const viewportWidth = window.innerWidth;\n//     const viewportHeight = window.innerHeight;\n\n//     // Obtener el ancho y alto del elemento\n//     const elementWidth = element.offsetWidth;\n//     const elementHeight = element.offsetHeight;\n\n//     // Obtener el contenedor padre para calcular la posición relativa\n//     const parentElement = element.parentElement;\n//     const parentRect = parentElement ? parentElement.getBoundingClientRect() : { left: 0, top: 0 };\n\n//     // Calcular la posición del tooltip en relación con el contenedor padre\n//     const offsetLeft = rect.left - parentRect.left;\n\n//     // Ajustar la posición si la tarjeta se sale del margen derecho\n//     if (rect.right > viewportWidth) {\n//       const overflowRight = rect.right - viewportWidth;\n//       const newLeft = Math.max(0, offsetLeft - overflowRight);\n//       this.setElementStyle('left', `${newLeft}px`);\n//     }\n\n//     // Ajustar la posición si la tarjeta se sale del margen izquierdo\n//     if (rect.left < 0) {\n//       const overflowLeft = Math.abs(rect.left);\n//       const newLeft = Math.max(0, offsetLeft + overflowLeft);\n//       this.setElementStyle('left', `${newLeft}px`);\n//     }\n//   }\n\n//   private adjustCardDimensions(): void {\n//     this.setElementStyle('max-width', this.MAX_CARD_WIDTH);\n\n//     const cardBody = this.element.nativeElement.querySelector('.viewer-card-body');\n//     if (cardBody) {\n//       this.setElementStyle('max-width', this.MAX_CONTENT_WIDTH, cardBody);\n\n//       const textElements = cardBody.querySelectorAll('*');\n//       textElements.forEach((textElement: HTMLElement) => {\n//         this.setElementStyle('max-width', this.MAX_CONTENT_WIDTH, textElement);\n//         this.setElementStyle('font-size', this.FONT_SIZE, textElement);\n//       });\n//     }\n//   }\n\n//   private setElementStyle(style: string, value: string, element: HTMLElement = this.element.nativeElement): void {\n//     this.renderer.setStyle(element, style, value);\n//   }\n// }\n\nimport { Directive, ElementRef, Renderer2, HostListener, Input, AfterViewInit } from '@angular/core';\n\n@Directive({\n  selector: '[appTooltipAdjust]'\n})\nexport class TooltipAdjustDirective implements AfterViewInit {\n  @Input() appTooltipAdjust: boolean;\n\n  private readonly MAX_CARD_WIDTH = '300px';\n  private readonly MAX_CONTENT_WIDTH = '150px';\n  private readonly FONT_SIZE = '14px';\n\n  constructor(private element: ElementRef, private renderer: Renderer2) { }\n\n  ngAfterViewInit(): void {\n    if (this.appTooltipAdjust) {\n      this.adjustTooltipPosition();\n      this.adjustCardDimensions();\n    }\n  }\n\n  @HostListener('window:resize')\n  onWindowResize(): void {\n    this.adjustTooltipPosition();\n    this.adjustCardDimensions();\n  }\n\n  private adjustTooltipPosition(): void {\n    const element = this.element.nativeElement;\n    const rect = element.getBoundingClientRect();\n\n    // Obtener el contenedor padre para calcular la posición relativa\n    const parentElement = element.parentElement;\n    if (!parentElement) return;\n\n    const parentRect = parentElement.getBoundingClientRect();\n\n    // Calcular la posición del tooltip en relación con el contenedor padre\n    const offsetLeft = rect.left - parentRect.left;\n    const offsetTop = rect.top - parentRect.top;\n\n    // Ajustar la posición si la tarjeta se sale del margen derecho\n    if (rect.right > parentRect.right) {\n      const overflowRight = rect.right - parentRect.right;\n      const newLeft = Math.max(0, offsetLeft - overflowRight);\n      this.setElementStyle('left', `${newLeft}px`);\n    }\n\n    // Ajustar la posición si la tarjeta se sale del margen izquierdo\n    if (rect.left < parentRect.left) {\n      const overflowLeft = parentRect.left - rect.left;\n      const newLeft = Math.min(0, offsetLeft + overflowLeft);\n      this.setElementStyle('left', `${newLeft}px`);\n    }\n\n    // Ajustar la posición si la tarjeta se sale del margen superior\n    if (rect.top < parentRect.top) {\n      const overflowTop = parentRect.top - rect.top;\n      const newTop = Math.min(0, offsetTop + overflowTop);\n      this.setElementStyle('top', `${newTop}px`);\n    }\n\n    // Ajustar la posición si la tarjeta se sale del margen inferior\n    if (rect.bottom > parentRect.bottom) {\n      const overflowBottom = rect.bottom - parentRect.bottom;\n      const newTop = Math.max(0, offsetTop - overflowBottom);\n      this.setElementStyle('top', `${newTop}px`);\n    }\n  }\n\n  private adjustCardDimensions(): void {\n    this.setElementStyle('max-width', this.MAX_CARD_WIDTH);\n\n    const cardBody = this.element.nativeElement.querySelector('.viewer-card-body');\n    if (cardBody) {\n      this.setElementStyle('max-width', this.MAX_CONTENT_WIDTH, cardBody);\n\n      const textElements = cardBody.querySelectorAll('*');\n      textElements.forEach((textElement: HTMLElement) => {\n        this.setElementStyle('max-width', this.MAX_CONTENT_WIDTH, textElement);\n        this.setElementStyle('font-size', this.FONT_SIZE, textElement);\n      });\n    }\n  }\n\n  private setElementStyle(style: string, value: string, element: HTMLElement = this.element.nativeElement): void {\n    this.renderer.setStyle(element, style, value);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}