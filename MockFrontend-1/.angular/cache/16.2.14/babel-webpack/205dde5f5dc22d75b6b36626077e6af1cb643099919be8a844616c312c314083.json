{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TooltipAdjustDirective {\n  constructor(element, renderer) {\n    this.element = element;\n    this.renderer = renderer;\n    this.MIN_CARD_WIDTH = '200px';\n    this.MAX_CARD_WIDTH = '300px';\n    this.MAX_CONTENT_WIDTH = '150px';\n    this.FONT_SIZE = '14px';\n  }\n  ngAfterViewInit() {\n    console.log(\"ENTRO EN NGAFTERVIEWINIT\");\n    if (this.appTooltipAdjust) {\n      this.adjustTooltipPosition();\n      this.adjustCardDimensions();\n    }\n  }\n  // @HostListener('window:resize')\n  // onWindowResize(){\n  //   console.log(\"ONWINDOWRESIZE\")\n  //   this.adjustTooltipPosition();\n  //   this.adjustCardDimensions();\n  // }\n  // @HostListener('mouseenter') onMouseEnter() {\n  //   this.adjustTooltipPosition();\n  // }\n  // @HostListener('mouseleave') onMouseLeave() {\n  //   this.adjustTooltipPosition();\n  // }\n  adjustTooltipPosition() {\n    // const element = this.element.nativeElement;\n    // const rect = element.getBoundingClientRect();\n    // const viewportWidth = window.innerWidth;\n    // // Obtener el ancho y alto del elemento\n    // const elementWidth = element.offsetWidth;\n    // const elementHeight = element.offsetHeight;\n    // // Obtener el contenedor padre para calcular la posición relativa\n    // const parentElement = element.parentElement;\n    // const parentRect = parentElement ? parentElement.getBoundingClientRect() : { left: 0, top: 0 };\n    // // Calcular la posición del tooltip en relación con el contenedor padre\n    // const offsetLeft = rect.left - parentRect.left;\n    // // Ajustar la posición si la tarjeta se sale del margen derecho\n    // if (rect.right > viewportWidth) {\n    //   const overflowRight = rect.right - viewportWidth;\n    //   const newLeft = Math.max(-200, offsetLeft - overflowRight);\n    //   this.setElementStyle('left', `${newLeft}px`);\n    // }\n    // // Ajustar la posición si la tarjeta se sale del margen izquierdo\n    // if (rect.left < 0) {\n    //   const overflowLeft = Math.abs(rect.left);\n    //   const newLeft = Math.max(20, offsetLeft + overflowLeft);\n    //   this.setElementStyle('left', `${newLeft}px`);\n    // }\n    const element = this.element.nativeElement;\n    const rect = element.getBoundingClientRect();\n    // Obtener el contenedor .viewers-container y su rectángulo delimitador\n    const viewersContainer = document.querySelector('.viewers-container');\n    if (!viewersContainer) {\n      console.error('Contenedor .viewers-container no encontrado');\n      return;\n    }\n    const containerRect = viewersContainer.getBoundingClientRect();\n    // Obtener el ancho del elemento\n    const elementWidth = element.offsetWidth;\n    const parentElement = element.parentElement; // Asumiendo que la imagen es el padre directo del tooltip\n    const parentRect = parentElement.getBoundingClientRect();\n    // Calcular la posición del tooltip en relación con el contenedor\n    let offsetLeft = parentRect.left - containerRect.left;\n    // Asegurarse de que el tooltip no se salga del margen derecho del contenedor\n    if (offsetLeft + elementWidth > containerRect.width) {\n      offsetLeft = containerRect.width - elementWidth;\n    }\n    // Asegurarse de que el tooltip no se salga del margen izquierdo del contenedor\n    if (offsetLeft < 0) {\n      offsetLeft = 0;\n    }\n    // Calcular la posición superior del tooltip justo debajo de la imagen\n    const offsetTop = parentRect.bottom - containerRect.top;\n    // Aplicar los estilos de posición al tooltip\n    this.setElementStyle('left', `${offsetLeft}px`);\n    this.setElementStyle('top', `${offsetTop}px`);\n  }\n  adjustCardDimensions() {\n    this.setElementStyle('max-width', this.MAX_CARD_WIDTH);\n    this.setElementStyle('min-width', this.MIN_CARD_WIDTH);\n    const cardBody = this.element.nativeElement.querySelector('.viewer-card-body');\n    if (cardBody) {\n      this.setElementStyle('max-width', this.MAX_CONTENT_WIDTH, cardBody);\n      const textElements = cardBody.querySelectorAll('*');\n      textElements.forEach(textElement => {\n        this.setElementStyle('max-width', this.MAX_CONTENT_WIDTH, textElement);\n        this.setElementStyle('font-size', this.FONT_SIZE, textElement);\n      });\n    }\n  }\n  setElementStyle(style, value, element = this.element.nativeElement) {\n    this.renderer.setStyle(element, style, value);\n  }\n  static #_ = this.ɵfac = function TooltipAdjustDirective_Factory(t) {\n    return new (t || TooltipAdjustDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: TooltipAdjustDirective,\n    selectors: [[\"\", \"appTooltipAdjust\", \"\"]],\n    inputs: {\n      appTooltipAdjust: \"appTooltipAdjust\"\n    }\n  });\n}","map":{"version":3,"names":["TooltipAdjustDirective","constructor","element","renderer","MIN_CARD_WIDTH","MAX_CARD_WIDTH","MAX_CONTENT_WIDTH","FONT_SIZE","ngAfterViewInit","console","log","appTooltipAdjust","adjustTooltipPosition","adjustCardDimensions","nativeElement","rect","getBoundingClientRect","viewersContainer","document","querySelector","error","containerRect","elementWidth","offsetWidth","parentElement","parentRect","offsetLeft","left","width","offsetTop","bottom","top","setElementStyle","cardBody","textElements","querySelectorAll","forEach","textElement","style","value","setStyle","_","i0","ɵɵdirectiveInject","ElementRef","Renderer2","_2","selectors","inputs"],"sources":["C:\\Users\\Ayelen\\Desktop\\SignalRPOC\\MockFrontend-1\\src\\app\\directive\\tooltip-adjust.directive.ts"],"sourcesContent":["import { Directive, ElementRef, Renderer2, HostListener, Input, AfterViewInit } from '@angular/core';\n\n@Directive({\n  selector: '[appTooltipAdjust]'\n})\nexport class TooltipAdjustDirective implements AfterViewInit{\n  @Input() appTooltipAdjust: boolean;\n\n  private readonly MIN_CARD_WIDTH = '200px';\n  private readonly MAX_CARD_WIDTH = '300px';\n  private readonly MAX_CONTENT_WIDTH = '150px';\n  private readonly FONT_SIZE = '14px';\n\n  constructor(private element: ElementRef, private renderer: Renderer2) { }\n\n  ngAfterViewInit(): void {\n    console.log(\"ENTRO EN NGAFTERVIEWINIT\")\n    if(this.appTooltipAdjust){\n      this.adjustTooltipPosition();\n      this.adjustCardDimensions();\n    }\n  }\n\n  // @HostListener('window:resize')\n  // onWindowResize(){\n  //   console.log(\"ONWINDOWRESIZE\")\n  //   this.adjustTooltipPosition();\n  //   this.adjustCardDimensions();\n  // }\n  // @HostListener('mouseenter') onMouseEnter() {\n  //   this.adjustTooltipPosition();\n  // }\n\n  // @HostListener('mouseleave') onMouseLeave() {\n  //   this.adjustTooltipPosition();\n  // }\n\n  adjustTooltipPosition() {\n    // const element = this.element.nativeElement;\n    // const rect = element.getBoundingClientRect();\n    // const viewportWidth = window.innerWidth;\n\n    // // Obtener el ancho y alto del elemento\n    // const elementWidth = element.offsetWidth;\n    // const elementHeight = element.offsetHeight;\n\n    // // Obtener el contenedor padre para calcular la posición relativa\n    // const parentElement = element.parentElement;\n    // const parentRect = parentElement ? parentElement.getBoundingClientRect() : { left: 0, top: 0 };\n\n    // // Calcular la posición del tooltip en relación con el contenedor padre\n    // const offsetLeft = rect.left - parentRect.left;\n\n    // // Ajustar la posición si la tarjeta se sale del margen derecho\n    // if (rect.right > viewportWidth) {\n    //   const overflowRight = rect.right - viewportWidth;\n    //   const newLeft = Math.max(-200, offsetLeft - overflowRight);\n    //   this.setElementStyle('left', `${newLeft}px`);\n    // }\n\n    // // Ajustar la posición si la tarjeta se sale del margen izquierdo\n    // if (rect.left < 0) {\n    //   const overflowLeft = Math.abs(rect.left);\n    //   const newLeft = Math.max(20, offsetLeft + overflowLeft);\n    //   this.setElementStyle('left', `${newLeft}px`);\n    // }\n    const element = this.element.nativeElement;\n    const rect = element.getBoundingClientRect();\n\n    // Obtener el contenedor .viewers-container y su rectángulo delimitador\n    const viewersContainer = document.querySelector('.viewers-container');\n    if (!viewersContainer) {\n      console.error('Contenedor .viewers-container no encontrado');\n      return;\n    }\n    const containerRect = viewersContainer.getBoundingClientRect();\n\n    // Obtener el ancho del elemento\n    const elementWidth = element.offsetWidth;\n    const parentElement = element.parentElement; // Asumiendo que la imagen es el padre directo del tooltip\n    const parentRect = parentElement.getBoundingClientRect();\n\n    // Calcular la posición del tooltip en relación con el contenedor\n    let offsetLeft = parentRect.left - containerRect.left;\n\n    // Asegurarse de que el tooltip no se salga del margen derecho del contenedor\n  if (offsetLeft + elementWidth > containerRect.width) {\n    offsetLeft = containerRect.width - elementWidth;\n  }\n\n  // Asegurarse de que el tooltip no se salga del margen izquierdo del contenedor\n  if (offsetLeft < 0) {\n    offsetLeft = 0;\n  }\n\n  // Calcular la posición superior del tooltip justo debajo de la imagen\n  const offsetTop = parentRect.bottom - containerRect.top;\n\n  // Aplicar los estilos de posición al tooltip\n  this.setElementStyle('left', `${offsetLeft}px`);\n  this.setElementStyle('top', `${offsetTop}px`);\n  }\n\n  private adjustCardDimensions(): void {\n    this.setElementStyle('max-width', this.MAX_CARD_WIDTH);\n    this.setElementStyle('min-width', this.MIN_CARD_WIDTH);\n\n    const cardBody = this.element.nativeElement.querySelector('.viewer-card-body');\n    if (cardBody) {\n      this.setElementStyle('max-width', this.MAX_CONTENT_WIDTH, cardBody);\n\n      const textElements = cardBody.querySelectorAll('*');\n      textElements.forEach((textElement: HTMLElement) => {\n        this.setElementStyle('max-width', this.MAX_CONTENT_WIDTH, textElement);\n        this.setElementStyle('font-size', this.FONT_SIZE, textElement);\n      });\n    }\n  }\n\n  private setElementStyle(style: string, value: string, element: HTMLElement = this.element.nativeElement): void {\n    this.renderer.setStyle(element, style, value);\n  }\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}