{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nimport { HttpConnection } from \"./HttpConnection\";\nimport { HubConnection } from \"./HubConnection\";\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\nimport { NullLogger } from \"./Loggers\";\nimport { Arg, ConsoleLogger } from \"./Utils\";\n/** A builder for configuring {@link @aspnet/signalr.HubConnection} instances. */\nvar HubConnectionBuilder = /** @class */function () {\n  function HubConnectionBuilder() {}\n  HubConnectionBuilder.prototype.configureLogging = function (logging) {\n    Arg.isRequired(logging, \"logging\");\n    if (isLogger(logging)) {\n      this.logger = logging;\n    } else {\n      this.logger = new ConsoleLogger(logging);\n    }\n    return this;\n  };\n  HubConnectionBuilder.prototype.withUrl = function (url, transportTypeOrOptions) {\n    Arg.isRequired(url, \"url\");\n    this.url = url;\n    // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\n    // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\n    if (typeof transportTypeOrOptions === \"object\") {\n      this.httpConnectionOptions = transportTypeOrOptions;\n    } else {\n      this.httpConnectionOptions = {\n        transport: transportTypeOrOptions\n      };\n    }\n    return this;\n  };\n  /** Configures the {@link @aspnet/signalr.HubConnection} to use the specified Hub Protocol.\r\n   *\r\n   * @param {IHubProtocol} protocol The {@link @aspnet/signalr.IHubProtocol} implementation to use.\r\n   */\n  HubConnectionBuilder.prototype.withHubProtocol = function (protocol) {\n    Arg.isRequired(protocol, \"protocol\");\n    this.protocol = protocol;\n    return this;\n  };\n  /** Creates a {@link @aspnet/signalr.HubConnection} from the configuration options specified in this builder.\r\n   *\r\n   * @returns {HubConnection} The configured {@link @aspnet/signalr.HubConnection}.\r\n   */\n  HubConnectionBuilder.prototype.build = function () {\n    // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\n    // provided to configureLogger\n    var httpConnectionOptions = this.httpConnectionOptions || {};\n    // If it's 'null', the user **explicitly** asked for null, don't mess with it.\n    if (httpConnectionOptions.logger === undefined) {\n      // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\n      httpConnectionOptions.logger = this.logger;\n    }\n    // Now create the connection\n    if (!this.url) {\n      throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\n    }\n    var connection = new HttpConnection(this.url, httpConnectionOptions);\n    return HubConnection.create(connection, this.logger || NullLogger.instance, this.protocol || new JsonHubProtocol());\n  };\n  return HubConnectionBuilder;\n}();\nexport { HubConnectionBuilder };\nfunction isLogger(logger) {\n  return logger.log !== undefined;\n}","map":{"version":3,"names":["HttpConnection","HubConnection","JsonHubProtocol","NullLogger","Arg","ConsoleLogger","HubConnectionBuilder","prototype","configureLogging","logging","isRequired","isLogger","logger","withUrl","url","transportTypeOrOptions","httpConnectionOptions","transport","withHubProtocol","protocol","build","undefined","Error","connection","create","instance","log"],"sources":["C:/Users/Ayelen/Desktop/SignalRPOC/MockFrontend-1/node_modules/@aspnet/signalr/dist/esm/HubConnectionBuilder.js"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n/** A builder for configuring {@link @aspnet/signalr.HubConnection} instances. */\r\nvar HubConnectionBuilder = /** @class */ (function () {\r\n    function HubConnectionBuilder() {\r\n    }\r\n    HubConnectionBuilder.prototype.configureLogging = function (logging) {\r\n        Arg.isRequired(logging, \"logging\");\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        }\r\n        else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n        return this;\r\n    };\r\n    HubConnectionBuilder.prototype.withUrl = function (url, transportTypeOrOptions) {\r\n        Arg.isRequired(url, \"url\");\r\n        this.url = url;\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = transportTypeOrOptions;\r\n        }\r\n        else {\r\n            this.httpConnectionOptions = {\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n        return this;\r\n    };\r\n    /** Configures the {@link @aspnet/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @aspnet/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    HubConnectionBuilder.prototype.withHubProtocol = function (protocol) {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n        this.protocol = protocol;\r\n        return this;\r\n    };\r\n    /** Creates a {@link @aspnet/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @aspnet/signalr.HubConnection}.\r\n     */\r\n    HubConnectionBuilder.prototype.build = function () {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        var httpConnectionOptions = this.httpConnectionOptions || {};\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        var connection = new HttpConnection(this.url, httpConnectionOptions);\r\n        return HubConnection.create(connection, this.logger || NullLogger.instance, this.protocol || new JsonHubProtocol());\r\n    };\r\n    return HubConnectionBuilder;\r\n}());\r\nexport { HubConnectionBuilder };\r\nfunction isLogger(logger) {\r\n    return logger.log !== undefined;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,UAAU,QAAQ,WAAW;AACtC,SAASC,GAAG,EAAEC,aAAa,QAAQ,SAAS;AAC5C;AACA,IAAIC,oBAAoB,GAAG,aAAe,YAAY;EAClD,SAASA,oBAAoBA,CAAA,EAAG,CAChC;EACAA,oBAAoB,CAACC,SAAS,CAACC,gBAAgB,GAAG,UAAUC,OAAO,EAAE;IACjEL,GAAG,CAACM,UAAU,CAACD,OAAO,EAAE,SAAS,CAAC;IAClC,IAAIE,QAAQ,CAACF,OAAO,CAAC,EAAE;MACnB,IAAI,CAACG,MAAM,GAAGH,OAAO;IACzB,CAAC,MACI;MACD,IAAI,CAACG,MAAM,GAAG,IAAIP,aAAa,CAACI,OAAO,CAAC;IAC5C;IACA,OAAO,IAAI;EACf,CAAC;EACDH,oBAAoB,CAACC,SAAS,CAACM,OAAO,GAAG,UAAUC,GAAG,EAAEC,sBAAsB,EAAE;IAC5EX,GAAG,CAACM,UAAU,CAACI,GAAG,EAAE,KAAK,CAAC;IAC1B,IAAI,CAACA,GAAG,GAAGA,GAAG;IACd;IACA;IACA,IAAI,OAAOC,sBAAsB,KAAK,QAAQ,EAAE;MAC5C,IAAI,CAACC,qBAAqB,GAAGD,sBAAsB;IACvD,CAAC,MACI;MACD,IAAI,CAACC,qBAAqB,GAAG;QACzBC,SAAS,EAAEF;MACf,CAAC;IACL;IACA,OAAO,IAAI;EACf,CAAC;EACD;AACJ;AACA;AACA;EACIT,oBAAoB,CAACC,SAAS,CAACW,eAAe,GAAG,UAAUC,QAAQ,EAAE;IACjEf,GAAG,CAACM,UAAU,CAACS,QAAQ,EAAE,UAAU,CAAC;IACpC,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IACxB,OAAO,IAAI;EACf,CAAC;EACD;AACJ;AACA;AACA;EACIb,oBAAoB,CAACC,SAAS,CAACa,KAAK,GAAG,YAAY;IAC/C;IACA;IACA,IAAIJ,qBAAqB,GAAG,IAAI,CAACA,qBAAqB,IAAI,CAAC,CAAC;IAC5D;IACA,IAAIA,qBAAqB,CAACJ,MAAM,KAAKS,SAAS,EAAE;MAC5C;MACAL,qBAAqB,CAACJ,MAAM,GAAG,IAAI,CAACA,MAAM;IAC9C;IACA;IACA,IAAI,CAAC,IAAI,CAACE,GAAG,EAAE;MACX,MAAM,IAAIQ,KAAK,CAAC,0FAA0F,CAAC;IAC/G;IACA,IAAIC,UAAU,GAAG,IAAIvB,cAAc,CAAC,IAAI,CAACc,GAAG,EAAEE,qBAAqB,CAAC;IACpE,OAAOf,aAAa,CAACuB,MAAM,CAACD,UAAU,EAAE,IAAI,CAACX,MAAM,IAAIT,UAAU,CAACsB,QAAQ,EAAE,IAAI,CAACN,QAAQ,IAAI,IAAIjB,eAAe,CAAC,CAAC,CAAC;EACvH,CAAC;EACD,OAAOI,oBAAoB;AAC/B,CAAC,CAAC,CAAE;AACJ,SAASA,oBAAoB;AAC7B,SAASK,QAAQA,CAACC,MAAM,EAAE;EACtB,OAAOA,MAAM,CAACc,GAAG,KAAKL,SAAS;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}