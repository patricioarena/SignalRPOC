{"ast":null,"code":"// import { Directive, ElementRef, Renderer2, HostListener, Input, AfterViewInit } from '@angular/core';\n// @Directive({\n//   selector: '[appTooltipAdjust]'\n// })\n// export class TooltipAdjustDirective implements AfterViewInit{\n//   @Input() appTooltipAdjust: boolean;\n//   constructor(private element: ElementRef, private renderer: Renderer2) { }\n//   ngAfterViewInit(): void {\n//     if(this.appTooltipAdjust){\n//       this.adjustTooltipPosition();\n//       this.setCardMaxWidth();\n//       this.setCardContentWidth();\n//     }\n//   }\n//   @HostListener('window:resize')\n//   onWindowResize(){\n//     this.adjustTooltipPosition();\n//   }\n//   adjustTooltipPosition() {\n//     const element = this.element.nativeElement;\n//     const rect = element.getBoundingClientRect();\n//     const viewportWidth = window.innerWidth;\n//     // Ajustar la posici贸n si la tarjeta se sale del margen derecho\n//     if (rect.right > viewportWidth) {\n//       const overflowRight = rect.right - viewportWidth;\n//       this.renderer.setStyle(element, 'left', `-${overflowRight}px`);\n//     }\n//     // Ajustar la posici贸n si la tarjeta se sale del margen izquierdo\n//     if (rect.left < 0) {\n//       const overflowLeft = Math.abs(rect.left);\n//       this.renderer.setStyle(element, 'left', `${overflowLeft}px`);\n//     }\n//   }\n//   private setCardMaxWidth(): void {\n//     const element = this.element.nativeElement;\n//     this.renderer.setStyle(element, 'max-width', '300px');\n//   }\n//   private setCardContentWidth(): void {\n//     const element = this.element.nativeElement;\n//     const textElements = element.querySelectorAll('.viewer-card-body, .viewer-card-body *');\n//     textElements.forEach((textElement: HTMLElement) => {\n//       this.renderer.setStyle(textElement, 'max-width', '150px');\n//     });\n//   }\n// }","map":{"version":3,"names":[],"sources":["C:\\Users\\Ayelen\\Desktop\\SignalRPOC\\MockFrontend-1\\src\\app\\directive\\tooltip-adjust.directive.ts"],"sourcesContent":["// import { Directive, ElementRef, Renderer2, HostListener, Input, AfterViewInit } from '@angular/core';\n\n// @Directive({\n//   selector: '[appTooltipAdjust]'\n// })\n// export class TooltipAdjustDirective implements AfterViewInit{\n//   @Input() appTooltipAdjust: boolean;\n\n//   constructor(private element: ElementRef, private renderer: Renderer2) { }\n\n//   ngAfterViewInit(): void {\n//     if(this.appTooltipAdjust){\n//       this.adjustTooltipPosition();\n//       this.setCardMaxWidth();\n//       this.setCardContentWidth();\n//     }\n//   }\n\n//   @HostListener('window:resize')\n//   onWindowResize(){\n//     this.adjustTooltipPosition();\n//   }\n\n//   adjustTooltipPosition() {\n//     const element = this.element.nativeElement;\n//     const rect = element.getBoundingClientRect();\n//     const viewportWidth = window.innerWidth;\n\n//     // Ajustar la posici贸n si la tarjeta se sale del margen derecho\n//     if (rect.right > viewportWidth) {\n//       const overflowRight = rect.right - viewportWidth;\n//       this.renderer.setStyle(element, 'left', `-${overflowRight}px`);\n//     }\n\n//     // Ajustar la posici贸n si la tarjeta se sale del margen izquierdo\n//     if (rect.left < 0) {\n//       const overflowLeft = Math.abs(rect.left);\n//       this.renderer.setStyle(element, 'left', `${overflowLeft}px`);\n//     }\n//   }\n\n\n//   private setCardMaxWidth(): void {\n//     const element = this.element.nativeElement;\n//     this.renderer.setStyle(element, 'max-width', '300px');\n//   }\n\n//   private setCardContentWidth(): void {\n//     const element = this.element.nativeElement;\n//     const textElements = element.querySelectorAll('.viewer-card-body, .viewer-card-body *');\n//     textElements.forEach((textElement: HTMLElement) => {\n//       this.renderer.setStyle(textElement, 'max-width', '150px');\n//     });\n//   }\n// }\n\n\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}